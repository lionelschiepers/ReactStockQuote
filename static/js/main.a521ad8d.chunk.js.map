{"version":3,"sources":["Components/ExchangeRates.js","Components/YahooFinanceLoader.js","Components/Portfolio.js","Components/YahooFinance.js","App.js","serviceWorker.js","index.js"],"names":["Cache","GetRate","from","to","a","url","Rates","axios","get","then","res","node","doc","DOMParser","parseFromString","data","nsResolver","createNSResolver","documentElement","nodes","evaluate","XPathResult","ANY_TYPE","result","iterateNext","currency","getAttribute","rate","push","toUpperCase","parseFloat","Error","fromRate","find","o","toRate","anyCorsHttp","create","baseURL","getUrl","quotes","fields","_","isArray","yahooFinanceUrl","join","YahooFinanceFields","YahooFinanceLoader","symbols","now","Date","i","length","symbol","cacheItem","localStorage","getItem","JSON","parse","splice","removeItem","chunks","chunk","json","quoteResponse","forEach","setItem","stringify","SecurityPostion","NumberOfShares","MarketCost","MarketCostEUR","MarketPrice","MarketPriceEUR","Transactions","PastGain","PastGainEUR","RateToEUR","this","Ticker","indexOf","endsWith","inEur","dividend","Security","trailingAnnualDividendRate","Number","isNaN","getTaxeRate","inEUR","price","regularMarketPrice","previousPrice","regularMarketPreviousClose","gain","CurrencyHelper","positions","position","Currency","Portfolio","parser","columns","Shares","Math","abs","Price","Commission","item","Symbol","Name","Type","toLowerCase","lastTransaction","last","x","min","pop","updateCurrency","tickers","filter","map","Load","yahooData","y","marketPrice","getDividendYield","dayGain","getDayGain","previousDayMarketPrice","YahooFinance","props","state","portfolio","marketCost","pastGain","dayDiff","dividendYield","dividendRate","sortBy","sortDirection","SortDirection","ASC","displayInEUR","_sort","bind","handleCheck","renderPrice","setState","getDayDiff","getDividendRatio","getDividendRate","list","orderedList","p","diff","DESC","getGainDiff","isString","reverse","_internalSort","cellData","dataKey","columnData","columnIndex","rowData","isScrolling","postData","rowIndex","toFixed","className","target","rel","href","forceUpdate","style","textAlign","width","toLocaleString","verticalAlign","type","onChange","defaultChecked","height","headerHeight","rowHeight","rowClassName","index","sort","rowCount","rowGetter","label","disableSort","cellRenderer","renderName","cellDataGetter","getGain","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a521ad8d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nclass Cache\r\n{\r\n    static Rates;\r\n}\r\n\r\n// i.e: let rate = await GetRate('USD', 'EUR')\r\nexport async function GetRate(from, to)\r\n{\r\n    const url = 'https://cors-anywhere.herokuapp.com/https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml';\r\n    if (Cache.Rates == null)\r\n    {\r\n        await axios\r\n            .get(url)\r\n            .then(res => \r\n                {\r\n                    let parser=new DOMParser();\r\n                    let doc = parser.parseFromString(res.data, 'text/xml');\r\n                    \r\n                    let nsResolver = doc.createNSResolver(doc.documentElement);\r\n                    \r\n                    let nodes = doc.evaluate(\"/gesmes:Envelope/*[name()='Cube']/*[name()='Cube']/*[name()='Cube']\", doc.documentElement, nsResolver, XPathResult.ANY_TYPE, null);\r\n                    let result = [];\r\n                    let node;\r\n                    while((node = nodes.iterateNext()) != null) \r\n                    {\r\n                        let currency = node.getAttribute('currency');\r\n                        let rate = node.getAttribute('rate');\r\n\r\n                        result.push({ currency:currency.toUpperCase(), rate:parseFloat(rate)});\r\n\r\n                        if (currency === 'GBP')\r\n                        {\r\n                            result.push({ currency:'GBp', rate:100.0 * parseFloat(rate)});\r\n                        }\r\n                    }\r\n\r\n                    // EUR => EUR\r\n                    result.push({ currency:'EUR', rate:1.0 });\r\n\r\n                    Cache.Rates = result;\r\n                }); \r\n    }\r\n\r\n    if (Cache.Rates == null)\r\n        throw new Error(`Failed to load the exchange rates from ${url}`);\r\n\r\n    let fromRate = Cache.Rates.find(o =>o.currency === from);\r\n    if (fromRate == null)\r\n        throw new Error (`Failed to retrieve a rate for ${from}`);\r\n\r\n    let toRate = Cache.Rates.find(o =>o.currency === to);\r\n    if (toRate == null)\r\n        throw new Error (`Failed to retrieve a rate for ${to}`);\r\n\r\n    let rate = (1 / fromRate.rate) * toRate.rate;\r\n    return rate;\r\n}\r\n","import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst anyCorsHttp = axios.create(\r\n    { baseURL:'https://cors-anywhere.herokuapp.com' }\r\n  );\r\n  \r\nconst yahooFinanceUrl = 'https://query1.finance.yahoo.com/v7/finance/quote';\r\n  \r\n  function getUrl(quotes, fields)\r\n  {\r\n    if (!_.isArray(quotes))\r\n      quotes = [quotes];\r\n  \r\n      let url = yahooFinanceUrl + '?symbols=' + _.join(quotes, ',');\r\n      if (fields == null)\r\n        return url;\r\n  \r\n      return url + \"&fields=\" + _.join(fields, ',');\r\n  }\r\n\r\nexport const YahooFinanceFields = {\r\n    /*\r\n    Ask : 'ask',\r\n    AskSize,\r\n    AverageDailyVolume10Day,\r\n    AverageDailyVolume3Month,\r\n    Bid,\r\n    BidSize,\r\n    BookValue,\r\n    */\r\n    Currency : 'currency',\r\n    /*\r\n    DividendDate,\r\n    EarningsTimestamp,\r\n    EarningsTimestampEnd,\r\n    EarningsTimestampStart,\r\n    EpsForward,\r\n    EpsTrailingTwelveMonths,\r\n    */\r\n    Exchange : 'exchange',\r\n    /*\r\n    ExchangeDataDelayedBy,\r\n    ExchangeTimezoneName,\r\n    ExchangeTimezoneShortName,\r\n    FiftyDayAverage,\r\n    FiftyDayAverageChange,\r\n    FiftyDayAverageChangePercent,\r\n    FiftyTwoWeekHigh,\r\n    FiftyTwoWeekHighChange,\r\n    FiftyTwoWeekHighChangePercent,\r\n    FiftyTwoWeekLow,\r\n    FiftyTwoWeekLowChange,\r\n    FiftyTwoWeekLowChangePercent,\r\n    FinancialCurrency,\r\n    ForwardPE,\r\n    FullExchangeName,\r\n    GmtOffSetMilliseconds,\r\n    Language,\r\n    LongName,\r\n    */\r\n    Market : 'market',\r\n    /*\r\n    MarketCap,\r\n    MarketState,\r\n    MessageBoardId,\r\n    PriceHint,\r\n    PriceToBook,\r\n    QuoteSourceName,\r\n    QuoteType,\r\n    RegularMarketChange,\r\n    RegularMarketChangePercent,\r\n    RegularMarketDayHigh,\r\n    RegularMarketDayLow,\r\n    */\r\n    RegularMarketOpen : 'regularMarketOpen',\r\n    RegularMarketPreviousClose : 'regularMarketPreviousClose',\r\n    RegularMarketPrice : 'regularMarketPrice',\r\n    /*\r\n    RegularMarketTime,\r\n    RegularMarketVolume,\r\n    PostMarketChange,\r\n    PostMarketChangePercent,\r\n    PostMarketPrice,\r\n    PostMarketTime,\r\n    SharesOutstanding,\r\n    ShortName,\r\n    SourceInterval,\r\n    */\r\n    Symbol : 'symbol',\r\n    /*\r\n    Tradeable,\r\n    */\r\n    TrailingAnnualDividendRate : 'trailingAnnualDividendRate',\r\n    TrailingAnnualDividendYield : 'trailingAnnualDividendYield',\r\n    /*\r\n    TrailingPE,\r\n    TwoHundredDayAverage,\r\n    TwoHundredDayAverageChange,\r\n    TwoHundredDayAverageChangePercent\r\n    */\r\n  };\r\n\r\nexport class YahooFinanceLoader\r\n{ \r\n  async Load(symbols, fields)\r\n  {\r\n    let now = Date.now();\r\n    \r\n    let result = [];\r\n\r\n    for(let i = symbols.length - 1; i >= 0; i--)\r\n    {\r\n      let symbol = symbols[i];\r\n      let cacheItem = localStorage.getItem(symbol);\r\n      if (cacheItem != null)\r\n      {\r\n        cacheItem = JSON.parse(cacheItem);\r\n        if ((now - cacheItem.Date) < 1000 * 60 * 5) // 5 minutes\r\n        {\r\n          result.push(cacheItem);\r\n          symbols.splice(i, 1);\r\n        }\r\n        else\r\n        {\r\n          localStorage.removeItem(symbol);\r\n        }\r\n      }\r\n    }\r\n\r\n    let chunks = _.chunk(symbols, 50);\r\n    for (let i =0;i<chunks.length;i++)\r\n    {\r\n        let chunk = chunks[i];\r\n        let chunkData = await anyCorsHttp\r\n            .get('/' + getUrl(chunk, fields))\r\n            .then(json => json.data.quoteResponse.result);\r\n        \r\n        chunkData.forEach(o =>\r\n        {\r\n          o.Date = now;\r\n          localStorage.setItem(o.symbol, JSON.stringify(o));\r\n          result.push(o);\r\n        });\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport parser  from 'csv-parse/lib/sync';\r\nimport axios from 'axios';\r\nimport { GetRate } from './ExchangeRates';\r\nimport{ YahooFinanceLoader, YahooFinanceFields } from './YahooFinanceLoader'\r\n\r\nclass SecurityPostion\r\n{\r\n  Ticker;\r\n  Market;\r\n  NumberOfShares = 0;\r\n  MarketCost = 0;\r\n  MarketCostEUR = 0;\r\n  MarketPrice = 0;\r\n  MarketPriceEUR = 0;\r\n  Currency;\r\n  Name;\r\n  Transactions = [];\r\n  PastGain = 0;\r\n  PastGainEUR = 0;\r\n  RateToEUR = 1;\r\n  Security; // price of one share\r\n\r\n  getTaxeRate()\r\n\t{\r\n    if (this.Ticker.indexOf('.') < 0)\r\n      return 0.85 * 0.7;\r\n    else if (this.Ticker.endsWith(\".BR\"))\r\n      return 0.7;\r\n    else if (this.Ticker.endsWith(\".VX\"))\r\n      return 0.65 * 0.7;\r\n    else if (this.Ticker.endsWith(\".ST\"))\r\n      return 0.7 * 0.7;\r\n    else if (this.Ticker.endsWith(\".DE\"))\r\n      return 0.7362 * 0.7;\r\n    else if (this.Ticker.endsWith(\".CA\"))\r\n      return 0.75 * 0.7;\r\n    else if (this.Ticker.endsWith(\".HE\"))\r\n      return 0.8 * 0.7;\r\n    else if (this.Ticker.endsWith(\".LU\"))\r\n      return 0.85 * 0.7;\r\n    else if (this.Ticker.endsWith(\".AS\"))\r\n      return 0.85 * 0.7;\r\n    else if (this.Ticker.endsWith(\".PA\"))\r\n      return 0.872 * 0.7;\r\n    else if (this.Ticker.endsWith(\".L\"))\r\n      return 0.7;\r\n    else \r\n      return 0.7; // at least belgian taxes\r\n  }\r\n    \r\n  getDividendYield(inEur = false)\r\n  {\r\n    let dividend = this.Security == null ? 0.0 : this.Security.trailingAnnualDividendRate;\r\n    dividend *= this.NumberOfShares;\r\n\r\n    if (Number.isNaN(dividend))\r\n      return 0.0;\r\n\r\n    dividend *= this.getTaxeRate();\r\n\r\n    return inEur === false ? dividend : dividend * this.RateToEUR;\r\n  }\r\n \r\n  getGain(inEur = false)\r\n  {\r\n    if (this.MarketPrice == null || this.MarketCost == null)\r\n      return null;\r\n    if (this.NumberOfShares === 0)\r\n      return null;\r\n\r\n      if (inEur)\r\n      return this.MarketPriceEUR - this.MarketCostEUR;\r\n      \r\n    return this.MarketPrice - this.MarketCost;\r\n  }\r\n\r\n  getGainDiff()\r\n  {\r\n    if (this.MarketPrice == null || this.MarketCost == null)\r\n      return 0.0;\r\n    if (this.NumberOfShares === 0)\r\n      return 0.0;\r\n\r\n\r\n    return 100.0 * this.MarketPrice / this.MarketCost - 100.0;\r\n  }\r\n\r\n  getDayGain(inEUR)\r\n  {\r\n    let price = this.Security == null ? null : this.Security.regularMarketPrice;\r\n    let previousPrice = this.Security == null ? null : this.Security.regularMarketPreviousClose;\r\n    if (price == null || previousPrice == null)\r\n      return 0.0;\r\n    \r\n    let gain = (price - previousPrice) * this.NumberOfShares;\r\n\r\n    return inEUR === false ? gain : gain * this.RateToEUR; \r\n  }\r\n\r\n  getDayDiff()\r\n  {\r\n    let price = this.Security == null ? null : this.Security.regularMarketPrice;\r\n    let previousPrice = this.Security == null ? null : this.Security.regularMarketPreviousClose;\r\n    if (price == null || previousPrice == null)\r\n      return null;\r\n        \r\n    return 100.0 * ((price / previousPrice) - 1.0);\r\n  }\r\n}\r\n\r\nclass CurrencyHelper\r\n{\r\n  // sets the currency of the positions using the market.\r\n  static async updateCurrency (positions)\r\n  {\r\n    for (let i = 0; i<positions.length; i++)\r\n    {\r\n      let position = positions[i];\r\n\r\n      if (position.Ticker.indexOf('.') < 0)\r\n        position.Currency = \"USD\";\r\n      else if (position.Ticker.endsWith(\".SW\"))\r\n        position.Currency = \"CHF\";\r\n      else if (position.Ticker.endsWith(\".L\"))\r\n        position.Currency = \"GBp\";\r\n      else if (position.Ticker.endsWith(\".OL\"))\r\n        position.Currency = \"NOK\";\r\n      else \r\n        position.Currency = 'EUR';\r\n\r\n      position.RateToEUR = await GetRate(position.Currency, 'EUR');\r\n    }\r\n  }\r\n}\r\n\r\nexport class Portfolio\r\n{ \r\n  static getDividendRatio(positions)\r\n  {\r\n    let marketPrice = 0;\r\n    let dividend = 0;\r\n\r\n    positions.filter(position => position.NumberOfShares > 0).forEach(position => {\r\n      marketPrice += position.MarketPriceEUR;\r\n      dividend += position.getDividendYield(true);\r\n    });\r\n\r\n    return 100.0 * dividend / marketPrice;\r\n  }\r\n\r\n  static getDividendRate(positions)\r\n  {\r\n    let dividend = 0;\r\n\r\n    positions\r\n      .filter(position => position.NumberOfShares > 0)\r\n      .forEach(position => dividend += position.getDividendYield(true));\r\n\r\n    return dividend;\r\n  }\r\n\r\n  static getDayDiff(positions)\r\n  {\r\n    let marketPrice = 0;\r\n    let dayGain = 0;\r\n\r\n    positions.filter(position => position.NumberOfShares > 0).forEach(position => {\r\n      marketPrice += position.MarketPriceEUR;\r\n      dayGain += position.getDayGain(true);\r\n    });\r\n\r\n    let previousDayMarketPrice = marketPrice - dayGain;\r\n    if (previousDayMarketPrice === 0)\r\n      return 0.0;\r\n    \r\n    return dayGain / previousDayMarketPrice;\r\n  }\r\n\r\n    // Loads the specified transactions file\r\n    // sample file: https://raw.githubusercontent.com/lionelschiepers/MyStock/master/MyStockWeb/Data/1.csv\r\n    async Load (url) \r\n     {\r\n        const result = [];\r\n\r\n        await axios\r\n          .get(url)\r\n          .then(res => {\r\n            const parsedCsv = parser(res.data, {columns:true});\r\n\r\n            parsedCsv.forEach(data =>\r\n            {\r\n              data.Shares = Math.abs(parseFloat(data.Shares));\r\n              data.Price = parseFloat(data.Price);\r\n              data.Commission = parseFloat(data.Commission);\r\n              \r\n              let item = result.find(o => o.Ticker === data.Symbol);\r\n              if (item == null)\r\n              {\r\n                item = new SecurityPostion();\r\n                item.Ticker = data.Symbol;\r\n                item.Name = data.Name;\r\n                result.push(item);\r\n              }\r\n\r\n              switch(data.Type.toLowerCase())\r\n              {\r\n                case 'buy':\r\n                  item.NumberOfShares += data.Shares;\r\n                  item.MarketCost +=  data.Shares * data.Price + data.Commission;\r\n                  item.Transactions.push(data);\r\n                  break;\r\n              \r\n                case 'sell':\r\n                  // calculate the past gain with the last transactions.\r\n                  while(data.Shares > 0)\r\n                  {\r\n                    let lastTransaction = _.last(item.Transactions);\r\n                    let x = Math.min(lastTransaction.Shares, data.Shares);\r\n                    item.MarketCost -= x * lastTransaction.Price + lastTransaction.Commission;\r\n                    item.NumberOfShares -= x;\r\n                    lastTransaction.Shares -= x;\r\n                    data.Shares -= x;\r\n                    item.PastGain += x * (data.Price - lastTransaction.Price);\r\n\r\n                    if (lastTransaction.Shares === 0)\r\n                      item.Transactions.pop();\r\n                  }\r\n                  break;\r\n\r\n                case 'deposit cash':\r\n                  item.PastGain += data.Commission;\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n            }\r\n          });\r\n      });\r\n\r\n      await CurrencyHelper.updateCurrency(result);\r\n\r\n      const tickers = result.filter(o=>o.NumberOfShares > 0).map(o=> o.Ticker);\r\n\r\n      let yahooData = await new YahooFinanceLoader().Load(tickers, [YahooFinanceFields.RegularMarketPrice, YahooFinanceFields.RegularMarketPreviousClose, YahooFinanceFields.TrailingAnnualDividendRate]);\r\n      result.forEach(o => o.Security = yahooData.find(y => y.symbol === o.Ticker));\r\n\r\n      result.forEach(position =>\r\n        {\r\n          position.MarketCostEUR  = position.RateToEUR * position.MarketCost;\r\n          position.PastGainEUR  = position.RateToEUR * position.PastGain;\r\n\r\n          if (position.Security == null)\r\n            return;\r\n          if (position.Security.regularMarketPrice == null)\r\n            return;\r\n\r\n          position.MarketPrice = position.Security.regularMarketPrice * position.NumberOfShares;\r\n          position.MarketPriceEUR = position.RateToEUR * position.MarketPrice;          \r\n        });\r\n        \r\n        return result;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Column, Table, SortDirection, AutoSizer} from 'react-virtualized';\r\nimport 'react-virtualized/styles.css'; // only needs to be imported once\r\nimport _ from 'lodash';\r\nimport { Portfolio } from './Portfolio';\r\nimport './YahooFinance.css';\r\n\r\nimport { CSVLink/*, CSVDownload*/ } from \"react-csv\";\r\n\r\nclass YahooFinance extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          portfolio : [],\r\n          marketCost : 0,\r\n          marketPrice : 0,\r\n          pastGain : 0,\r\n          gain : 0,\r\n          dayDiff : 0,\r\n          dividendYield : 0,\r\n          dividendRate : 0,\r\n          sortBy: 'Name',\r\n          sortDirection: SortDirection.ASC,\r\n          displayInEUR : false,\r\n        }\r\n\r\n        this._sort = this._sort.bind(this); \r\n        this.handleCheck = this.handleCheck.bind(this);\r\n        this.renderPrice = this.renderPrice.bind(this);\r\n      }\r\n\r\n      componentDidMount() {\r\n        let portfolioBuilder = new Portfolio();\r\n        portfolioBuilder\r\n          .Load('https://raw.githubusercontent.com/lionelschiepers/MyStock/master/MyStockWeb/Data/1.csv')\r\n          .then(portfolio => \r\n            {\r\n              this.setState({portfolio:portfolio})\r\n              \r\n              let marketCost = 0;\r\n              let marketPrice = 0;\r\n              let pastGain = 0;\r\n              portfolio\r\n                .forEach(position =>\r\n                {\r\n                  pastGain += position.PastGainEUR;\r\n\r\n                  if (Number.isNaN(position.MarketCostEUR))\r\n                    return;\r\n                  if (Number.isNaN(position.MarketPriceEUR))\r\n                    return;\r\n                  \r\n                  marketCost += position.MarketCostEUR;\r\n                  marketPrice+= position.MarketPriceEUR;\r\n                });\r\n\r\n                let gain = marketCost === 0 ? 0 : marketPrice/marketCost - 1.0;\r\n                let dayDiff = Portfolio.getDayDiff(portfolio);\r\n                let dividendYield= Portfolio.getDividendRatio(portfolio);\r\n                let dividendRate = Portfolio.getDividendRate(portfolio);\r\n\r\n                this.setState({\r\n                  marketCost:marketCost, \r\n                  marketPrice:marketPrice, \r\n                  gain:gain, \r\n                  pastGain:pastGain,\r\n                  dayDiff:dayDiff,\r\n                  dividendYield:dividendYield,\r\n                  dividendRate:dividendRate\r\n                });\r\n            });\r\n      }\r\n\r\n      _internalSort(list, sortBy, sortDirection)\r\n      {\r\n        let orderedList = _.sortBy(list, p => \r\n          {\r\n            if (sortBy === 'Diff')\r\n            {\r\n              let diff = p.getDayDiff();\r\n              if (p.NumberOfShares === 0)\r\n                diff = null;\r\n                \r\n              if (diff == null && sortDirection === SortDirection.DESC)\r\n                diff = -100000000; // always at the bottom\r\n\r\n              return diff;\r\n            }\r\n\r\n            if (sortBy === 'GainPercent')\r\n            {\r\n              let diff = p.getGainDiff();\r\n              if (p.NumberOfShares === 0)\r\n                diff = null;\r\n                \r\n              if (diff == null && sortDirection === SortDirection.DESC)\r\n                diff = -100000000; // always at the bottom\r\n\r\n              return diff;\r\n            }\r\n\r\n            if (_.isString(p[sortBy]))\r\n              return p[sortBy].toLowerCase(); // case insensitive sort.\r\n              \r\n            return p[sortBy]\r\n          });\r\n\r\n        if (sortDirection === SortDirection.DESC)\r\n          orderedList = orderedList.reverse();\r\n\r\n          return orderedList;\r\n      }\r\n\r\n      _sort({sortBy, sortDirection}) {\r\n        const {\r\n            portfolio\r\n          } = this.state;\r\n\r\n          let orderedList = this._internalSort(portfolio, sortBy, sortDirection);\r\n          this.setState( {portfolio: orderedList, sortBy:sortBy, sortDirection:sortDirection} );\r\n      }\r\n\r\n      renderPrice({\r\n        cellData,\r\n        columnData,\r\n        columnIndex,\r\n        dataKey,\r\n        isScrolling,\r\n        rowData,\r\n        rowIndex\r\n      })\r\n      {\r\n        let postData = '';\r\n        \r\n        if (dataKey === 'Security.regularMarketPrice' && rowData.Security != null)\r\n        {\r\n          if (cellData != null)\r\n            postData = rowData.Currency;\r\n        }\r\n        \r\n          if (dataKey === 'NumberOfShares')\r\n          return (<div>{cellData == null ? '': cellData.toFixed(0)}</div>);\r\n\r\n          if (dataKey === 'Diff')\r\n          {\r\n            let price = rowData.Security == null ? null : rowData.Security.regularMarketPrice;\r\n            let previousPrice = rowData.Security == null ? null : rowData.Security.regularMarketPreviousClose;\r\n            if (price == null || previousPrice == null)\r\n              return(<div />);\r\n            \r\n            cellData =  100.0 * ((price / previousPrice) - 1.0);\r\n            postData = '%';\r\n          }\r\n\r\n          if (dataKey === 'GainPercent')\r\n          {\r\n            postData = '%';\r\n          }\r\n\r\n          if (dataKey === 'MarketCost' && this.state.displayInEUR)\r\n            cellData = rowData.MarketCostEUR;\r\n            if (dataKey === 'MarketPrice' && this.state.displayInEUR)\r\n            cellData = rowData.MarketPriceEUR;\r\n            if (dataKey === 'PastGain' && this.state.displayInEUR)\r\n            cellData = rowData.PastGainEUR;\r\n\r\n          if ((dataKey === 'MarketCost' || dataKey === 'MarketPrice') && cellData === 0)\r\n            cellData = null;\r\n\r\n          return (<div>{cellData == null ? '': cellData.toFixed(2)} {postData}</div>);\r\n      }\r\n\r\n      renderName({\r\n        cellData,\r\n        columnData,\r\n        columnIndex,\r\n        dataKey,\r\n        isScrolling,\r\n        rowData,\r\n        rowIndex\r\n      })\r\n      {\r\n        return (<a className='stockName' target='_blank' rel=\"noopener noreferrer\" href={'https://finance.yahoo.com/quote/' +rowData.Ticker}>{rowData.Name}</a>);\r\n      }\r\n    \r\n      handleCheck()\r\n      {\r\n        this.setState({displayInEUR:!this.state.displayInEUR});\r\n        this.forceUpdate();\r\n      }\r\n\r\n    render() {\r\n        const {\r\n            portfolio,\r\n            sortBy,\r\n            sortDirection,\r\n          } = this.state;\r\n\r\n        return (\r\n<div>\r\n  <div style={{textAlign:'left'}}>\r\n    <table style={{width:'100%'}}>\r\n      <tbody>\r\n      <tr>\r\n        <td>\r\n          Market Price: {this.state.marketPrice.toLocaleString(\"fr-BE\", {style: \"currency\", currency: \"EUR\"})}\r\n          <br/>\r\n          Market Cost: {this.state.marketCost.toLocaleString(\"fr-BE\", {style: \"currency\", currency: \"EUR\"})}\r\n          <br/>\r\n          Total Gain: {(this.state.gain * 100.0).toFixed(2)}%\r\n          <br/>\r\n          Day diff: {(this.state.dayDiff * 100.0).toFixed(2)}%\r\n          <br/>\r\n          Past Gain: {this.state.pastGain.toLocaleString(\"fr-BE\", {style: \"currency\", currency: \"EUR\"})}\r\n          <br/>\r\n          Dividend Yield: {this.state.dividendYield.toFixed(2)}% ({this.state.dividendRate.toLocaleString(\"fr-BE\", {style: \"currency\", currency: \"EUR\"})})\r\n        </td>\r\n        <td style={{textAlign:'right', verticalAlign:'top'}}><CSVLink data={this.state.portfolio}>Download data</CSVLink></td>\r\n      </tr>\r\n    </tbody>\r\n    </table>\r\n    <br />\r\n  </div>\r\n  <div style={{textAlign:'left'}}>\r\n\t\t<input type=\"checkbox\" onChange={this.handleCheck} defaultChecked={this.state.displayInEUR}/> Display in EUR\r\n\t</div>\r\n  <div>\r\n  <AutoSizer>\r\n    {({height, width}) => (\r\n    <Table\r\n      width={width}\r\n      height={1000}\r\n      headerHeight={20}\r\n      rowHeight={30}\r\n      rowClassName={({ index }) => {\r\n        if(index !== -1 && index %2 ===0) {\r\n          return \"evenRow\"\r\n        } else if(index!==-1 && index%2===1) {\r\n          return \"oddRow\"\r\n        }}}\r\n      sort={this._sort}\r\n      sortBy={sortBy}\r\n      sortDirection={sortDirection}\r\n      rowCount={portfolio.length}\r\n      rowGetter={({index}) => portfolio[index]}>\r\n        <Column className='stockName' width={300} label=\"Name\" dataKey=\"Name\" disableSort={false} cellRenderer={this.renderName}/>\r\n        <Column width={100} label=\"Price\" dataKey=\"Security.regularMarketPrice\" disableSort={false} cellDataGetter={({rowData}) => rowData.Security == null ? null : rowData.Security.regularMarketPrice} cellRenderer={this.renderPrice} />\r\n        <Column width={100} label=\"Diff\" dataKey=\"Diff\" disableSort={false} cellDataGetter={({rowData}) => rowData.getDayDiff()} cellRenderer={this.renderPrice} />\r\n        <Column width={100} label=\"Shares\" dataKey=\"NumberOfShares\" disableSort={false} cellRenderer={this.renderPrice} />\r\n        <Column width={150} label=\"Market Cost\" dataKey=\"MarketCost\" disableSort={false} cellRenderer={this.renderPrice} />\r\n        <Column width={150} label=\"Market Price\" dataKey=\"MarketPrice\" disableSort={false} cellRenderer={this.renderPrice} />\r\n        <Column width={150} label=\"Gain\" dataKey=\"Gain\" disableSort={false} cellDataGetter={({rowData}) => rowData.getGain(this.state.displayInEUR)} cellRenderer={this.renderPrice} />\r\n        <Column width={150} label=\"Gain %\" dataKey=\"GainPercent\" disableSort={false} cellDataGetter={({rowData}) => rowData.getGainDiff()} cellRenderer={this.renderPrice} />\r\n        <Column width={150} label=\"Past Gain\" dataKey=\"PastGain\" disableSort={false} cellRenderer={this.renderPrice} />\r\n    </Table>\r\n    )}\r\n    </AutoSizer>,\r\n  </div>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default YahooFinance;","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport YahooFinance from \"./Components/YahooFinance\";\r\n/*\r\n<header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n*/\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <YahooFinance />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}