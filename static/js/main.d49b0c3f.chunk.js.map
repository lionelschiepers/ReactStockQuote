{"version":3,"sources":["logo.svg","Components/YahooFinanceLoader.js","Components/Portfolio.js","Components/YahooFinance.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","anyCorsHttp","axios","create","baseURL","getUrl","quotes","fields","_","isArray","url","yahooFinanceUrl","join","YahooFinanceFields","YahooFinanceLoader","Load","symbols","a","result","chunks","chunk","i","length","get","then","json","data","quoteResponse","chunkData","push","SecurityPostion","NumberOfShares","MarketCost","Transactions","PastGain","CurrencyHelper","updateCurrency","positions","forEach","position","Ticker","indexOf","Currency","endsWith","Portfolio","res","parsedCsv","parser","columns","Shares","parseFloat","Price","Commission","item","find","o","Symbol","Name","Type","toLowerCase","Math","abs","lastTransaction","last","x","min","pop","totalMarketCost","eurPositions","filter","list","name","description","YahooFinance","props","state","yahooData","_internalSort","SortDirection","ASC","sortBy","sortDirection","_sort","bind","setState","orderedList","p","DESC","reverse","this","JSON","stringify","regularMarketPrice","error","width","height","headerHeight","rowHeight","sort","rowCount","rowGetter","index","label","dataKey","disableSort","Component","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d49b0c3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst anyCorsHttp = axios.create(\r\n    { baseURL:'https://cors-anywhere.herokuapp.com' }\r\n  );\r\n  \r\nconst yahooFinanceUrl = 'https://query1.finance.yahoo.com/v7/finance/quote';\r\n  \r\n  function getUrl(quotes, fields)\r\n  {\r\n    if (!_.isArray(quotes))\r\n      quotes = [quotes];\r\n  \r\n      let url = yahooFinanceUrl + '?symbols=' + _.join(quotes, ',');\r\n      if (fields == null)\r\n        return url;\r\n  \r\n      return url + \"&fields=\" + _.join(fields, ',');\r\n  }\r\n\r\nexport const YahooFinanceFields = {\r\n    Ask : 'ask',\r\n    /*\r\n    AskSize,\r\n    AverageDailyVolume10Day,\r\n    AverageDailyVolume3Month,\r\n    Bid,\r\n    BidSize,\r\n    BookValue,\r\n    */\r\n    Currency : 'currency',\r\n    /*\r\n    DividendDate,\r\n    EarningsTimestamp,\r\n    EarningsTimestampEnd,\r\n    EarningsTimestampStart,\r\n    EpsForward,\r\n    EpsTrailingTwelveMonths,\r\n    */\r\n    Exchange : 'exchange',\r\n    /*\r\n    ExchangeDataDelayedBy,\r\n    ExchangeTimezoneName,\r\n    ExchangeTimezoneShortName,\r\n    FiftyDayAverage,\r\n    FiftyDayAverageChange,\r\n    FiftyDayAverageChangePercent,\r\n    FiftyTwoWeekHigh,\r\n    FiftyTwoWeekHighChange,\r\n    FiftyTwoWeekHighChangePercent,\r\n    FiftyTwoWeekLow,\r\n    FiftyTwoWeekLowChange,\r\n    FiftyTwoWeekLowChangePercent,\r\n    FinancialCurrency,\r\n    ForwardPE,\r\n    FullExchangeName,\r\n    GmtOffSetMilliseconds,\r\n    Language,\r\n    LongName,\r\n    */\r\n    Market : 'market',\r\n    /*\r\n    MarketCap,\r\n    MarketState,\r\n    MessageBoardId,\r\n    PriceHint,\r\n    PriceToBook,\r\n    QuoteSourceName,\r\n    QuoteType,\r\n    RegularMarketChange,\r\n    RegularMarketChangePercent,\r\n    RegularMarketDayHigh,\r\n    RegularMarketDayLow,\r\n    */\r\n    RegularMarketOpen : 'regularMarketOpen',\r\n    RegularMarketPreviousClose : 'regularMarketPreviousClose',\r\n    RegularMarketPrice : 'regularMarketPrice',\r\n    /*\r\n    RegularMarketTime,\r\n    RegularMarketVolume,\r\n    PostMarketChange,\r\n    PostMarketChangePercent,\r\n    PostMarketPrice,\r\n    PostMarketTime,\r\n    SharesOutstanding,\r\n    ShortName,\r\n    SourceInterval,\r\n    Symbol,\r\n    Tradeable,\r\n    TrailingAnnualDividendRate,\r\n    TrailingAnnualDividendYield,\r\n    TrailingPE,\r\n    TwoHundredDayAverage,\r\n    TwoHundredDayAverageChange,\r\n    TwoHundredDayAverageChangePercent\r\n    */\r\n  };\r\n\r\n\r\n  \r\nexport class YahooFinanceLoader\r\n{ \r\n  Load = async (symbols, fields) =>\r\n  {\r\n    let result = [];\r\n    let chunks = _.chunk(symbols, 20);\r\n    for (let i =0;i<chunks.length;i++)\r\n    {\r\n        let chunk = chunks[i];\r\n        let chunkData = await anyCorsHttp\r\n            .get('/' + getUrl(chunk, fields))\r\n            .then(json => json.data.quoteResponse.result);\r\n        \r\n        result.push(...chunkData);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport parser  from 'csv-parse/lib/sync';\r\nimport axios from 'axios';\r\n\r\nclass SecurityPostion\r\n{\r\n  Ticker;\r\n  Market;\r\n  NumberOfShares = 0;\r\n  MarketCost = 0;\r\n  Currency;\r\n  Name;\r\n  Transactions = [];\r\n  PastGain = 0;\r\n}\r\n\r\nclass CurrencyHelper\r\n{\r\n  static updateCurrency = (positions) =>\r\n  {\r\n    _.forEach(positions, (position)=>\r\n    {\r\n      if (position.Ticker.indexOf('.') < 0)\r\n        position.Currency = \"USD\";\r\n      else if (position.Ticker.endsWith(\".SW\"))\r\n        position.Currency = \"CHF\";\r\n      else if (position.Ticker.endsWith(\".L\"))\r\n        position.Currency = \"GBp\";\r\n      else if (position.Ticker.endsWith(\".OL\"))\r\n        position.Currency = \"NOK\";\r\n      else \r\n        position.Currency = 'EUR';\r\n    });\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport class Portfolio\r\n{ \r\n    // Loads the specified transactions\r\n    // sample file: https://raw.githubusercontent.com/lionelschiepers/MyStock/master/MyStockWeb/Data/1.csv\r\n    Load = async(url) => {\r\n        \r\n        const result = [];\r\n          axios\r\n            .get(url)\r\n            .then(res => {\r\n                const parsedCsv = parser(res.data, {columns:true});\r\n\r\n                _.forEach(parsedCsv, (data)=>\r\n            {\r\n              data.Shares = parseFloat(data.Shares);\r\n              data.Price = parseFloat(data.Price);\r\n              data.Commission = parseFloat(data.Commission);\r\n              \r\n              let item = _.find(result, (o) => o.Ticker === data.Symbol);\r\n              if (item == null)\r\n              {\r\n                item = new SecurityPostion();\r\n                item.Ticker = data.Symbol;\r\n                item.Name = data.Name;\r\n                result.push(item);\r\n              }\r\n                switch(data.Type.toLowerCase())\r\n                {\r\n                  case 'buy':\r\n                    item.NumberOfShares += parseFloat(data.Shares);\r\n                    item.MarketCost +=  Math.abs(parseFloat(data.Shares)) * parseFloat(data.Price);\r\n                    item.MarketCost += parseFloat(data.Commission);\r\n                    item.Transactions.push(data);\r\n                    break;\r\n                  case 'sell':\r\n                    // calculate the past gain with the last transactions.\r\n                    while(data.Shares > 0)\r\n                    {\r\n                      let lastTransaction = _.last(item.Transactions);\r\n                      let x = Math.min(lastTransaction.Shares, data.Shares);\r\n                      item.MarketCost -= x * lastTransaction.Price;\r\n                      lastTransaction.Shares -= x;\r\n                      data.Shares -= x;\r\n                      item.PastGain += x * data.Price;\r\n                      \r\n\r\n                      if (lastTransaction.Shares === 0)\r\n                        item.Transactions.pop();\r\n                    }\r\n                    break;\r\n\r\n                    case 'deposit cash':\r\n                      item.PastGain += data.Commission;\r\n                      break;\r\n                    default:\r\n                      break;\r\n                      \r\n                }\r\n              });\r\n\r\n              CurrencyHelper.updateCurrency(result);\r\n\r\n              let totalMarketCost = 0;\r\n              let eurPositions = _.filter(result, (o) => o.Currency === \"EUR\");\r\n\r\n              _.forEach(eurPositions, (o) => totalMarketCost+=o.MarketCost + o.PastGain);\r\n              // let totalCurrentPrice = 0;\r\n      });\r\n      \r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Column, Table, SortDirection} from 'react-virtualized';\r\nimport 'react-virtualized/styles.css'; // only needs to be imported once\r\nimport _ from 'lodash';\r\nimport {YahooFinanceLoader, YahooFinanceFields} from './YahooFinanceLoader';\r\nimport { Portfolio } from './Portfolio';\r\n\r\nconst list = [\r\n  {name: 'Xavier', description: 'T'},\r\n  {name: 'Lionel', description: 'B'},\r\n  {name: 'Fabrice', description: 'E'},\r\n];\r\n\r\nclass YahooFinance extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          yahooData : {},\r\n          list : this._internalSort(list, 'name', SortDirection.ASC),\r\n          sortBy: 'name',\r\n          sortDirection: SortDirection.ASC,\r\n        }\r\n\r\n        this._sort = this._sort.bind(this); \r\n\r\n        let loader = new YahooFinanceLoader();\r\n        loader.Load(['AAPL', 'MSFT'], [YahooFinanceFields.RegularMarketPrice]);\r\n\r\n        let portfolio = new Portfolio();\r\n        portfolio.Load('https://raw.githubusercontent.com/lionelschiepers/MyStock/master/MyStockWeb/Data/1.csv');\r\n      }\r\n\r\n      componentDidMount() {\r\n        let loader = new YahooFinanceLoader();\r\n        loader\r\n          .Load(['AAPL'], [YahooFinanceFields.RegularMarketPrice])\r\n          .then(result => \r\n            this.setState({yahooData : result}));\r\n      }\r\n\r\n      _internalSort(list, sortBy, sortDirection)\r\n      {\r\n        let orderedList = _.sortBy(list, p => p[sortBy]);\r\n        if (sortDirection === SortDirection.DESC)\r\n          orderedList = orderedList.reverse();\r\n\r\n          return orderedList;\r\n      }\r\n\r\n      _sort({sortBy, sortDirection}) {\r\n        const {\r\n            list\r\n          } = this.state;\r\n\r\n          let orderedList = this._internalSort(list, sortBy, sortDirection);\r\n          this.setState( {list: orderedList, sortBy:sortBy, sortDirection:sortDirection} );\r\n      }\r\n    \r\n    render() {\r\n        const {\r\n            yahooData,\r\n            sortBy,\r\n            sortDirection,\r\n          } = this.state;\r\n\r\n        let json = '';\r\n        try {\r\n          if (_.isArray(yahooData))\r\n            json = JSON.stringify(yahooData[0].regularMarketPrice);\r\n\r\n        } catch(error) {\r\n            json = 'error';\r\n        }\r\n        return (\r\n            <div><div>Apple data:{json}</div>\r\n            <div><Table\r\n    width={300}\r\n    height={300}\r\n    headerHeight={20}\r\n    rowHeight={30}\r\n    sort={this._sort}\r\n    sortBy={sortBy}\r\n    sortDirection={sortDirection}\r\n    rowCount={list.length}\r\n    rowGetter={({index}) => this.state.list[index]}>\r\n    <Column label=\"Name\" dataKey=\"name\" width={100} disableSort={false} />\r\n    <Column width={200} label=\"Description\" dataKey=\"description\" disableSort={false} />\r\n  </Table></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default YahooFinance;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport YahooFinance from \"./Components/YahooFinance\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <div><YahooFinance /></div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}